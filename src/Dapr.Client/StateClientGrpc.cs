// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

namespace Dapr.Client
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;
    using System.Text.Json;
    using System.Threading;
    using System.Threading.Tasks;
    using Dapr.Client.Autogen.Grpc;
    using Google.Protobuf;
    using Google.Protobuf.WellKnownTypes;
    using Grpc.Core;

    internal class StateClientGrpc : StateClient
    {
        private readonly JsonSerializerOptions jsonSerializerOptions;
        DaprClientGrpc daprClient;

        /// <summary>
        /// Initializes a new instance of the <see cref="StateClientGrpc"/> class.
        /// </summary>
        /// <param name="daprClient">gRPC channel to create gRPC clients.</param>
        /// <param name="jsonSerializerOptions">Json serialization options.</param>
        internal StateClientGrpc(DaprClientGrpc daprClient, JsonSerializerOptions jsonSerializerOptions = null)
        {
            this.jsonSerializerOptions = jsonSerializerOptions;
            this.daprClient = daprClient;
        }

        /// <inheritdoc/>
        public override async ValueTask<TValue> GetStateAsync<TValue>(string storeName, string key, CancellationToken cancellationToken = default)
        {
            var getStateEnvelope = new GetStateEnvelope()
            {
                StoreName = storeName,
                Key = key,
            };

            var callOptions = new CallOptions(cancellationToken: cancellationToken);
            var response = await daprClient.AutogeneratedDaprClient.GetStateAsync(getStateEnvelope, callOptions);

            if (response.Data.Value.IsEmpty)
            {
                return default;
            }

            var responseData = response.Data.Value.ToStringUtf8();
            return JsonSerializer.Deserialize<TValue>(responseData, this.jsonSerializerOptions);
        }

        /// <inheritdoc/>
        public override async ValueTask SaveStateAsync<TValue>(string storeName, string key, TValue value, CancellationToken cancellationToken = default)
        {
            // Create PublishEventEnvelope
            var saveStateEnvelope = new SaveStateEnvelope()
            {
                StoreName = storeName,
            };

            var stateRequest = new StateRequest()
            {
                Key = key,
            };

            if (value != null)
            {
                using var stream = new MemoryStream();
                await JsonSerializer.SerializeAsync(stream, value, this.jsonSerializerOptions, cancellationToken);
                await stream.FlushAsync();

                // set the position to beginning of stream.
                stream.Seek(0, SeekOrigin.Begin);

                var data = new Any
                {
                    Value = await ByteString.FromStreamAsync(stream)
                };

                stateRequest.Value = data;
            }

            saveStateEnvelope.Requests.Add(stateRequest);
            var callOptions = new CallOptions(cancellationToken: cancellationToken);
            await daprClient.AutogeneratedDaprClient.SaveStateAsync(saveStateEnvelope, callOptions);
        }

        /// <inheritdoc/>
        public override async ValueTask DeleteStateAsync(string storeName, string key, CancellationToken cancellationToken = default)
        {
            var deleteStateEnvelope = new DeleteStateEnvelope()
            {
                StoreName = storeName,
                Key = key,
            };

            var callOptions = new CallOptions(cancellationToken: cancellationToken);
            await daprClient.AutogeneratedDaprClient.DeleteStateAsync(deleteStateEnvelope, callOptions);
        }
    }
}
